package com.awsp8.wizardry.registry;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import com.awsp8.wizardry.Info;

public class UpdateRegistry {

	String[] urls = new String[]{
		"https://raw.githubusercontent.com/AwesomeSpider/Wizardry/master/src/main/resources/assets/wizardry/versionResources/CurrentVersion.txt",
		"https://raw.githubusercontent.com/AwesomeSpider/Wizardry/master/src/main/resources/assets/wizardry/versionResources/FeaturePhrase.txt",
		"https://raw.githubusercontent.com/AwesomeSpider/Wizardry/master/src/main/resources/assets/wizardry/versionResources/Changelog.txt"
	};
	
	/**
	 * Returns null if no new version is found. If null
	 * is returned, no further processing will be done in this
	 * class.
	 * @return New Version (if any)
	 * @throws IOException 
	 */
	public String newVersion()
			throws IOException{
		String result;
		
		URL url = new URL(urls[0]);
		URLConnection connection = url.openConnection();
        BufferedReader in = new BufferedReader(
                                new InputStreamReader(
                                    connection.getInputStream()));

        StringBuilder response = new StringBuilder();
        String inputLine;

        while ((inputLine = in.readLine()) != null) 
            response.append(inputLine);

        in.close();

        result = response.toString(); //Equals the version found (current).
        
        if (Info.VERSION != result) //Checks if the version of the mod that is installed
        	result = null;			//on the client is not comparable to the version above.
        
        return result;
	}
	
	/**
	 * Performs an update check so the game knows if it
	 * needs to notify the player or not.
	 */
	public boolean performCheck(){
		boolean result = false;
		
		try {
			if (newVersion() != null)
				result = true;
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
	/**
	 * Returns the new version available version safely. This means that
	 * no exceptions will have to be handled because this method 
	 * does that already.
	 */
	public String getNewVersionSafely(){
		String resultNV = null;
		String resultFP = null;
		String resultCL = null;
		
			try {
				resultNV = newVersion();
			} catch (IOException e) {
				e.printStackTrace();
			}
		
			URL urlFP = null;
			try {
				urlFP = new URL(urls[1]);
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
			URLConnection connectionFP = null;
			try {
				connectionFP = urlFP.openConnection();
			} catch (IOException e) {
				e.printStackTrace();
			}
			BufferedReader inFP = null;
			try {
				inFP = new BufferedReader(
				                    	new InputStreamReader(
				                    			connectionFP.getInputStream()));
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			StringBuilder responseFP = new StringBuilder();
			String inputLineFP;

			try {
				while ((inputLineFP = inFP.readLine()) != null) 
					responseFP.append(inputLineFP);
			} catch (IOException e) {
				e.printStackTrace();
			}

			try {
				inFP.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

			resultFP = responseFP.toString(); //Equals the version phrase found (current).
		
			URL urlCL = null;
			try {
				urlCL = new URL(urls[2]);
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
			URLConnection connectionCL = null;
			try {
				connectionCL = urlCL.openConnection();
			} catch (IOException e) {
				e.printStackTrace();
			}
			BufferedReader inCL = null;
			try {
				inCL = new BufferedReader(
				                    	new InputStreamReader(
				                    			connectionCL.getInputStream()));
			} catch (IOException e) {
				e.printStackTrace();
			}

			StringBuilder responseCL = new StringBuilder();
			String inputLineCL;

			try {
				while ((inputLineCL = inCL.readLine()) != null) 
					responseCL.append(inputLineCL);
			} catch (IOException e) {
				e.printStackTrace();
			}

			try {
				inCL.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

			resultCL = responseCL.toString(); //Equals the version phrase found (current).
        
		String result = null;
		
		if (resultNV != null)
			result = resultNV;
		
		if (resultFP != null)
			result = result + " - " + resultFP;
		
		if (resultCL != null)
			result = result + resultCL;
		
		if (result == null)
        result = "This feature is currently not supported. Ask the developer for more information.";
		
		return result;
	}
}
